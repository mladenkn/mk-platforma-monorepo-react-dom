generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma-types"
  writeNullishInModelTypes = "true"
  createInputTypes         = "false"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id                   Int                     @id @default(autoincrement())
  title                String                  @db.VarChar(256)
  description          String?
  contact              String                  @db.VarChar(256)
  location_id          Int?
  author_id            Int
  expertEndorsement_id Int?                    @unique
  isDeleted            Boolean                 @default(false)
  comments             Comment[]
  author               User                    @relation(fields: [author_id], references: [id], map: "Post_author_id_User_id_fk")
  expertEndorsement    Post_ExpertEndorsement? @relation(fields: [expertEndorsement_id], references: [id], map: "Post_expertEndorsement_id_Post_ExpertEndorsement_id_fk")
  location             Location?               @relation(fields: [location_id], references: [id], map: "Post_location_id_Location_id_fk")
  categories           Category[]              @relation("CategoryToPost")
}

model Post_ExpertEndorsement {
  id          Int                            @id @default(autoincrement())
  post_id     Int                            @unique
  firstName   String                         @db.VarChar(64)
  lastName    String                         @db.VarChar(64)
  avatarStyle String
  post        Post?
  skills      Post_ExpertEndorsement_skill[]
}

model Post_ExpertEndorsement_skill {
  id                   Int                    @id @default(autoincrement())
  label                String                 @db.VarChar(64)
  level                Int?
  expertEndorsement_id Int
  expertEndorsement    Post_ExpertEndorsement @relation(fields: [expertEndorsement_id], references: [id], map: "Post_ExpertEndorsement_skill_expertEndorsement_id_Post_ExpertEn")

  @@unique([label, expertEndorsement_id], map: "Post_ExpertEndorsement_skill_expertEndorsement_id_label_key")
}

model Category {
  id        Int        @id @default(autoincrement())
  parent_id Int?
  label     String     @unique
  label_hr  String
  icon_mui  String
  parent    Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], map: "Category_parent_id_Category_id_fk")
  children  Category[] @relation("CategoryHierarchy")
  posts     Post[]     @relation("CategoryToPost")
}

model Location {
  id              Int     @id @default(autoincrement())
  google_id       String  @unique @db.VarChar(128)
  latitude        Decimal
  longitude       Decimal
  name            String  @db.VarChar(128)
  adminAreaLevel1 String? @db.VarChar(128)
  country         String  @db.VarChar(64)
  posts           Post[]
}

model Image {
  id              Int     @id @default(autoincrement())
  post_id         Int?
  url             String
  uploadthing_key String? @unique @db.VarChar(128)
  isMain          Boolean @default(false)
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String
  author_id Int
  post_id   Int
  isDeleted Boolean @default(false)
  author    User    @relation(fields: [author_id], references: [id], map: "Comment_author_id_User_id_fk")
  post      Post    @relation(fields: [post_id], references: [id], map: "Comment_post_id_Post_id_fk")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String?   @unique @db.VarChar(32)
  avatarStyle String
  email       String?   @unique @db.VarChar(64)
  canMutate   Boolean   @default(true)
  accounts    Account[]
  comments    Comment[]
  posts       Post[]
  sessions    Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_User_id_fk")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(128)
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_User_id_fk")
}

model VerificationToken {
  identifier String
  token      String   @unique @db.VarChar(128)
  expires    DateTime

  @@unique([identifier, token])
}
