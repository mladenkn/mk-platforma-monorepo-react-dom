datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma-types"
  createInputTypes         = false
  writeNullishInModelTypes = true
}

model Post {
  id                   Int     @id @default(autoincrement())
  title                String  @db.VarChar(256)
  description          String? @db.Text
  contact              String  @db.VarChar(256)
  location_id          Int?
  author_id            Int
  expertEndorsement_id Int?    @unique
  isDeleted            Boolean @default(false)

  location          Location?               @relation(fields: [location_id], references: [id])
  images            Image[]
  comments          Comment[]
  categories        Category[]
  author            User                    @relation(fields: [author_id], references: [id])
  expertEndorsement Post_ExpertEndorsement? @relation(fields: [expertEndorsement_id], references: [id])
}

model Post_ExpertEndorsement {
  id          Int    @id @default(autoincrement())
  post_id     Int    @unique
  firstName   String @db.VarChar(64)
  lastName    String @db.VarChar(64)
  avatarStyle String

  post   Post?
  skills Post_ExpertEndorsement_skill[]
}

model Post_ExpertEndorsement_skill {
  id                   Int                    @id @default(autoincrement())
  label                String                 @db.VarChar(64)
  level                Int?
  expertEndorsement    Post_ExpertEndorsement @relation(fields: [expertEndorsement_id], references: [id])
  expertEndorsement_id Int

  @@unique([expertEndorsement_id, label])
}

model Category {
  id        Int    @id @default(autoincrement())
  label     String @unique
  parent_id Int?
  label_hr  String
  icon_mui  String

  posts    Post[]
  parent   Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children Category[] @relation("CategoryHierarchy")
}

model Location {
  id              Int     @id @default(autoincrement())
  google_id       String  @unique @db.VarChar(128)
  latitude        Decimal
  longitude       Decimal
  name            String  @db.VarChar(128)
  country         String  @db.VarChar(64)
  adminAreaLevel1 String? @db.VarChar(128)

  posts Post[]
}

model Image {
  id              Int     @id @default(autoincrement())
  uploadthing_key String? @unique @db.VarChar(128)
  post_id         Int?
  url             String  @db.Text
  isMain          Boolean @default(false)
  Post            Post?   @relation(fields: [post_id], references: [id])
}

model Comment {
  id        Int     @id @default(autoincrement())
  content   String  @db.Text
  author_id Int
  post_id   Int
  isDeleted Boolean @default(false)

  post   Post @relation(fields: [post_id], references: [id])
  author User @relation(fields: [author_id], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @unique @db.VarChar(32)
  avatarStyle   String
  email         String?   @unique @db.VarChar(64)
  emailVerified DateTime?
  canMutate     Boolean   @default(true)

  comments Comment[]
  posts    Post[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(128)
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique @db.VarChar(128)
  expires    DateTime

  @@unique([identifier, token])
}
