datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma-types"
  createInputTypes         = false
  writeNullishInModelTypes = true
}

model Post {
  id                      Int    @id @default(autoincrement())
  title                   String
  description             String
  contact                 String
  location_id             Int?
  author_id               Int
  as_PersonEndorsement_id Int?   @unique

  location            Location?                 @relation(fields: [location_id], references: [id])
  images              Image[]
  comments            Post_comment[]
  categories          Post_category[]
  author              User                      @relation(fields: [author_id], references: [id])
  asPersonEndorsement Post_asPersonEndorsement? @relation(fields: [as_PersonEndorsement_id], references: [id])
}

model Post_asPersonEndorsement {
  id          Int    @id @default(autoincrement())
  post_id     Int    @unique
  firstName   String
  lastName    String
  avatarStyle Json

  post   Post?
  skills Post_asPersonEndorsement_skill[]
}

model Post_asPersonEndorsement_skill {
  id                      Int                       @id @default(autoincrement())
  label                   String
  level                   Int
  as_PersonEndorsement    Post_asPersonEndorsement? @relation(fields: [as_PersonEndorsement_id], references: [id])
  as_PersonEndorsement_id Int?

  @@unique([as_PersonEndorsement_id, label])
}

enum Post_category_label {
  job
  accommodation
  personEndorsement
  sellable
  gathering
  gathering_spirituality
  gathering_work
  gathering_hangout
}

model Post_category {
  id        Int                 @id @default(autoincrement())
  label     Post_category_label @unique
  parent_id Int?
  posts     Post[]

  parent   Post_category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children Post_category[] @relation("CategoryHierarchy")
}

model Location {
  id        Int     @id @default(autoincrement())
  google_id String  @unique
  latitude  Decimal
  longitude Decimal
  name      String

  posts Post[]
}

model Image {
  id            Int     @id @default(autoincrement())
  cloudinary_id String?
  post_id       Int?
  url           String

  posts Post[]
}

model Post_comment {
  id        Int    @id @default(autoincrement())
  content   String
  author_id Int
  post_id   Int

  post   Post @relation(fields: [post_id], references: [id])
  author User @relation(fields: [author_id], references: [id])
}

model User {
  id          Int    @id @default(autoincrement())
  name        String @unique
  avatarStyle Json

  comments Post_comment[]
  posts    Post[]
}
