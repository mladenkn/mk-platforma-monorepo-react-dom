datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

generator zod {
  provider                 = "zod-prisma-types"
  createInputTypes         = false
  writeNullishInModelTypes = true
}

model Post {
  id                   Int     @id @default(autoincrement())
  title                String
  description          String?
  contact              String
  location_id          Int?
  author_id            Int
  expertEndorsement_id Int?    @unique
  isDeleted            Boolean @default(false)

  location          Location?               @relation(fields: [location_id], references: [id])
  images            Image[]
  comments          Comment[]
  categories        Category[]
  author            User                    @relation(fields: [author_id], references: [id])
  expertEndorsement Post_ExpertEndorsement? @relation(fields: [expertEndorsement_id], references: [id])
}

model Post_ExpertEndorsement {
  id          Int    @id @default(autoincrement())
  post_id     Int    @unique
  firstName   String
  lastName    String
  avatarStyle Json

  post   Post?
  skills Post_ExpertEndorsement_skill[]
}

model Post_ExpertEndorsement_skill {
  id                   Int                     @id @default(autoincrement())
  label                String
  level                Int
  expertEndorsement    Post_ExpertEndorsement? @relation(fields: [expertEndorsement_id], references: [id])
  expertEndorsement_id Int?

  @@unique([expertEndorsement_id, label])
}

enum Category_label {
  job
  job_demand
  accommodation
  accommodation_demand
  sellable
  sellable_demand
  sellable_food
  sellable_clothes
  sellable_furniture
  sellable_tool
  sellable_gadget
  sellable_buildingMaterial
  gathering
  gathering_spirituality
  gathering_work
  gathering_hangout
}

model Category {
  id        Int            @id @default(autoincrement())
  label     Category_label @unique
  parent_id Int?
  posts     Post[]

  parent   Category?  @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children Category[] @relation("CategoryHierarchy")
}

model Location {
  id        Int     @id @default(autoincrement())
  google_id String  @unique
  latitude  Decimal
  longitude Decimal
  name      String

  posts Post[]
}

model Image {
  id            Int     @id @default(autoincrement())
  cloudinary_id String?
  post_id       Int?
  url           String

  posts Post[]
}

model Comment {
  id        Int    @id @default(autoincrement())
  content   String
  author_id Int
  post_id   Int

  post   Post @relation(fields: [post_id], references: [id])
  author User @relation(fields: [author_id], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @unique
  avatarStyle   Json
  email         String?   @unique
  emailVerified DateTime?
  canMutate     Boolean   @default(false)

  comments Comment[]
  posts    Post[]
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
